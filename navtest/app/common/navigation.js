"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var frameModule = require("ui/frame");
var token = true;
exports.navPages = [];
exports.navigation = {
    goToRoot: function (newPage) {
        var topFrame = frameModule.topmost();
        topFrame.ios.navBarVisibility = "never";
        topFrame.navigate({
            moduleName: "rootPage",
            context: newPage,
            clearHistory: false
        });
    },
    goBack: function () {
        var topFrame = frameModule.topmost();
        topFrame.goBack();
    },
    goToPage1: function () {
        var topFrame = frameModule.topmost();
        topFrame.ios.navBarVisibility = "never";
        topFrame.navigate({
            moduleName: "views/page1/page1",
            clearHistory: false
        });
    },
    goToPage2: function () {
        var topFrame = frameModule.topmost();
        topFrame.ios.navBarVisibility = "never";
        topFrame.navigate({
            moduleName: "views/page2/page2",
            clearHistory: false
        });
    },
    goToRegisterPage: function () {
        frameModule.topmost().navigate("views/register/register");
    },
    goToPasswordPage: function () {
        frameModule.topmost().navigate("views/password/password");
    },
    goToListPage: function () {
        frameModule.topmost().navigate({
            moduleName: "views/list/list",
            clearHistory: true
        });
    },
    signOut: function () {
        //config.invalidateToken();
        frameModule.topmost().navigate({
            moduleName: "views/login/login",
            animated: false,
            clearHistory: true
        });
    },
    rootPage: function () {
        //return token ? "views/page1/page1" : "views/login/login";
        return "rootPage";
    },
    startPage: function () {
        return exports.navPages[0];
    },
    getPageByName: function (name) {
        return exports.navPages.filter(function (p) { return p.name == name; }).pop();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hdmlnYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBeUM7QUFLekMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ04sUUFBQSxRQUFRLEdBQW1CLEVBQUUsQ0FBQztBQUU5QixRQUFBLFVBQVUsR0FBRztJQUNwQixRQUFRLEVBQUUsVUFBVSxPQUFnQjtRQUNoQyxJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFckMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUM7UUFFeEMsUUFBUSxDQUFDLFFBQVEsQ0FBQztZQUNkLFVBQVUsRUFBRSxVQUFVO1lBQ3RCLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFlBQVksRUFBRSxLQUFLO1NBQ3RCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDRCxNQUFNLEVBQUU7UUFDSixJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFDRCxTQUFTLEVBQUU7UUFDUCxJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFckMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUM7UUFFeEMsUUFBUSxDQUFDLFFBQVEsQ0FBQztZQUNkLFVBQVUsRUFBRSxtQkFBbUI7WUFDL0IsWUFBWSxFQUFFLEtBQUs7U0FDdEIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELFNBQVMsRUFBRTtRQUNQLElBQUksUUFBUSxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQztRQUN4QyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQ2QsVUFBVSxFQUFFLG1CQUFtQjtZQUMvQixZQUFZLEVBQUUsS0FBSztTQUN0QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsZ0JBQWdCLEVBQUU7UUFDZCxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUNELGdCQUFnQixFQUFFO1FBQ2QsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFDRCxZQUFZLEVBQUU7UUFDVixXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQzNCLFVBQVUsRUFBRSxpQkFBaUI7WUFDN0IsWUFBWSxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELE9BQU8sRUFBRTtRQUNMLDJCQUEyQjtRQUMzQixXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQzNCLFVBQVUsRUFBRSxtQkFBbUI7WUFDL0IsUUFBUSxFQUFFLEtBQUs7WUFDZixZQUFZLEVBQUUsSUFBSTtTQUNyQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsUUFBUSxFQUFFO1FBQ04sMkRBQTJEO1FBQzNELE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUNELFNBQVMsRUFBRTtRQUNQLE1BQU0sQ0FBQyxnQkFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFDRCxhQUFhLEVBQUUsVUFBVSxJQUFZO1FBQ2pDLE1BQU0sQ0FBQyxnQkFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFkLENBQWMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3RELENBQUM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZyYW1lTW9kdWxlID0gcmVxdWlyZShcInVpL2ZyYW1lXCIpO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkJhclZpc2liaWxpdHkgfSBmcm9tIFwidWkvZW51bXNcIjtcbmltcG9ydCB7IE5hdlBhZ2UgfSBmcm9tIFwiLi4vbW9kZWwvbmF2UGFnZVwiO1xuXG5cbnZhciB0b2tlbiA9IHRydWU7XG5leHBvcnQgdmFyIG5hdlBhZ2VzOiBBcnJheTxOYXZQYWdlPiA9IFtdO1xuXG5leHBvcnQgdmFyIG5hdmlnYXRpb24gPSB7XG4gICAgZ29Ub1Jvb3Q6IGZ1bmN0aW9uIChuZXdQYWdlOiBOYXZQYWdlKSB7XG4gICAgICAgIHZhciB0b3BGcmFtZSA9IGZyYW1lTW9kdWxlLnRvcG1vc3QoKTtcblxuICAgICAgICB0b3BGcmFtZS5pb3MubmF2QmFyVmlzaWJpbGl0eSA9IFwibmV2ZXJcIjtcblxuICAgICAgICB0b3BGcmFtZS5uYXZpZ2F0ZSh7XG4gICAgICAgICAgICBtb2R1bGVOYW1lOiBcInJvb3RQYWdlXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBuZXdQYWdlLFxuICAgICAgICAgICAgY2xlYXJIaXN0b3J5OiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGdvQmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9wRnJhbWUgPSBmcmFtZU1vZHVsZS50b3Btb3N0KCk7XG4gICAgICAgIHRvcEZyYW1lLmdvQmFjaygpO1xuICAgIH0sXG4gICAgZ29Ub1BhZ2UxOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3BGcmFtZSA9IGZyYW1lTW9kdWxlLnRvcG1vc3QoKTtcblxuICAgICAgICB0b3BGcmFtZS5pb3MubmF2QmFyVmlzaWJpbGl0eSA9IFwibmV2ZXJcIjtcblxuICAgICAgICB0b3BGcmFtZS5uYXZpZ2F0ZSh7XG4gICAgICAgICAgICBtb2R1bGVOYW1lOiBcInZpZXdzL3BhZ2UxL3BhZ2UxXCIsXG4gICAgICAgICAgICBjbGVhckhpc3Rvcnk6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgZ29Ub1BhZ2UyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3BGcmFtZSA9IGZyYW1lTW9kdWxlLnRvcG1vc3QoKTtcbiAgICAgICAgdG9wRnJhbWUuaW9zLm5hdkJhclZpc2liaWxpdHkgPSBcIm5ldmVyXCI7XG4gICAgICAgIHRvcEZyYW1lLm5hdmlnYXRlKHtcbiAgICAgICAgICAgIG1vZHVsZU5hbWU6IFwidmlld3MvcGFnZTIvcGFnZTJcIixcbiAgICAgICAgICAgIGNsZWFySGlzdG9yeTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBnb1RvUmVnaXN0ZXJQYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZyYW1lTW9kdWxlLnRvcG1vc3QoKS5uYXZpZ2F0ZShcInZpZXdzL3JlZ2lzdGVyL3JlZ2lzdGVyXCIpO1xuICAgIH0sXG4gICAgZ29Ub1Bhc3N3b3JkUGFnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBmcmFtZU1vZHVsZS50b3Btb3N0KCkubmF2aWdhdGUoXCJ2aWV3cy9wYXNzd29yZC9wYXNzd29yZFwiKTtcbiAgICB9LFxuICAgIGdvVG9MaXN0UGFnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBmcmFtZU1vZHVsZS50b3Btb3N0KCkubmF2aWdhdGUoe1xuICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJ2aWV3cy9saXN0L2xpc3RcIixcbiAgICAgICAgICAgIGNsZWFySGlzdG9yeTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHNpZ25PdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9jb25maWcuaW52YWxpZGF0ZVRva2VuKCk7XG4gICAgICAgIGZyYW1lTW9kdWxlLnRvcG1vc3QoKS5uYXZpZ2F0ZSh7XG4gICAgICAgICAgICBtb2R1bGVOYW1lOiBcInZpZXdzL2xvZ2luL2xvZ2luXCIsXG4gICAgICAgICAgICBhbmltYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBjbGVhckhpc3Rvcnk6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICByb290UGFnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAvL3JldHVybiB0b2tlbiA/IFwidmlld3MvcGFnZTEvcGFnZTFcIiA6IFwidmlld3MvbG9naW4vbG9naW5cIjtcbiAgICAgICAgcmV0dXJuIFwicm9vdFBhZ2VcIjtcbiAgICB9LFxuICAgIHN0YXJ0UGFnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmF2UGFnZXNbMF07XG4gICAgfSxcbiAgICBnZXRQYWdlQnlOYW1lOiBmdW5jdGlvbiAobmFtZTogc3RyaW5nKTogTmF2UGFnZSB7XG4gICAgICAgIHJldHVybiBuYXZQYWdlcy5maWx0ZXIocCA9PiBwLm5hbWUgPT0gbmFtZSkucG9wKCk7XG4gICAgfVxufTtcbiJdfQ==