"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
require("rxjs");
var page_1 = require("ui/page");
var rxjs_1 = require("rxjs");
var d3 = require("d3-ease");
var mkPt = function (x, y) { return { x: x, y: y }; };
/*
const msElapsed = (scheduler = Scheduler.animationFrame) =>
    Observable.defer(() => {
        const start = scheduler.now();
        return Observable.interval(0, scheduler)
            .map(() => scheduler.now() - start);
    });
        */
var msElapsed = function (scheduler) {
    if (scheduler === void 0) { scheduler = rxjs_1.Scheduler.animationFrame; }
    return Observable_1.Observable.defer(function () {
        var start = scheduler.now();
        return Observable_1.Observable.interval(0, scheduler)
            .map(function () { return scheduler.now() - start; });
    });
};
var duration = function (ms, scheduler) {
    if (scheduler === void 0) { scheduler = rxjs_1.Scheduler.animationFrame; }
    return msElapsed(scheduler)
        .map(function (elapsedMs) { return elapsedMs / ms; })
        .takeWhile(function (t) { return t <= 1; });
};
var amount = function (d) { return function (t) { return t * d; }; };
var amountRev = function (d, rev) {
    if (rev === void 0) { rev = false; }
    return function (t) {
        var ret = rev ? (1 - t) * d : t * d;
        return ret;
    };
};
var amountFromTo = function (range) {
    return function (t) {
        var ret = range.from + t * (range.to - range.from);
        return ret;
    };
};
var elasticOut = function (t) {
    return Math.sin(-13.0 * (t + 1.0) *
        Math.PI / 2) *
        Math.pow(2.0, -10.0 * t) +
        1.0;
};
//////////////////
var transformPoint = function (point) {
    return function (amtX, amtY) {
        if (amtX === void 0) { amtX = 0; }
        if (amtY === void 0) { amtY = 0; }
        return ({ x: point.x + amtX, y: point.y + amtY });
    };
};
var transformPath = function (path) {
    return function (amtX, amtY) {
        if (amtX === void 0) { amtX = 0; }
        if (amtY === void 0) { amtY = 0; }
        console.log("amtX: " + amtX + " , amtY: " + amtY);
        return path.map(function (p) { return transformPoint(p)(amtX, amtY); });
    };
};
var getClipPathValue = function (path) {
    var pieces = [];
    for (var i = 0; i < path.length; i++) {
        pieces.push(path[i].x + "% " + path[i].y + "%");
    }
    return "polygon(" + pieces.join(', ') + ")";
};
var clipPathValueToArray = function (polygon) {
    var vals = polygon.substring(polygon.indexOf('(') + 1, polygon.indexOf(')'));
    var pointStrings = vals.split(',').filter(function (x) { return x; });
    return pointStrings.map(function (pStr) {
        var ptParts = pStr.replace(/\%/g, '').split(' ').filter(function (x) { return x; });
        return mkPt(parseInt(ptParts[0]), parseInt(ptParts[1]));
    });
};
var ParalComponent = (function () {
    function ParalComponent(page, ngZone) {
        this.page = page;
        this.ngZone = ngZone;
        //private path: Point[] = [mkPt(25, 0), mkPt(100, 0), mkPt(75, 100), mkPt(0, 100)];
        this.pathVal = 'polygon(30% 0, 50% 0, 35% 100%, 15% 100%)';
        this.rev = true;
    }
    ParalComponent.prototype.ngOnInit = function () {
        var self = this;
        //let theLabel = this.labelRef.nativeElement;
        //let stack1 = this.stack1Ref.nativeElement;
    };
    ParalComponent.prototype.ngAfterViewInit = function () {
    };
    Object.defineProperty(ParalComponent.prototype, "range", {
        get: function () {
            return this.rev ? { from: 10, to: 150 } : { from: 150, to: 10 };
        },
        enumerable: true,
        configurable: true
    });
    ParalComponent.prototype.onParalClick = function (args) {
        var paral = args;
        var amtChange = 50;
        var path = clipPathValueToArray(this.pathVal);
        var tempPath = transformPath(path)(-amtChange);
        duration(500)
            .map(d3.easeElasticOut)
            .map(amount(amtChange))
            .map(function (amt) { return transformPath(tempPath)(amt); })
            .map(getClipPathValue)
            .do(function (newPathVal) { return paral.style.clipPath = newPathVal; })
            .subscribe();
    };
    ParalComponent.prototype.onPan = function (args) {
        console.log(args.state);
    };
    ParalComponent.prototype.onTouch = function (args) {
        console.log(args.action);
    };
    ParalComponent.prototype.handleError = function (e) {
        console.dir(e);
    };
    return ParalComponent;
}());
__decorate([
    core_1.ViewChild('lbl'),
    __metadata("design:type", core_1.ElementRef)
], ParalComponent.prototype, "labelRef", void 0);
__decorate([
    core_1.ViewChild('stack1'),
    __metadata("design:type", core_1.ElementRef)
], ParalComponent.prototype, "stack1Ref", void 0);
ParalComponent = __decorate([
    core_1.Component({
        selector: "paral",
        template: "\n    <StackLayout>\n        <Button text=\"TAP\" (tap)=\"onParalClick(lbl)\"></Button>\n        <Label #lbl class=\"paral\" (tap)=\"onParalClick(lbl)\"></Label>\n    </StackLayout>\n    ",
        styles: ["\n    .paral {\n        width: 100%;\n        height: 300px;\n        background-color: purple;\n        clip-path: polygon(-75% 0%, 0% 0%, -25% 100%, -100% 100%);\n        clip-path: polygon(30% 0, 50% 0, 35% 100%, 15% 100%);\n    }\n    "]
    }),
    __metadata("design:paramtypes", [page_1.Page, core_1.NgZone])
], ParalComponent);
exports.ParalComponent = ParalComponent;
//# sourceMappingURL=data:application/json;base64,