"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
require("rxjs");
var page_1 = require("ui/page");
var rxjs_1 = require("rxjs");
var d3 = require("d3-ease");
/*
const msElapsed = (scheduler = Scheduler.animationFrame) =>
    Observable.defer(() => {
        const start = scheduler.now();
        return Observable.interval(0, scheduler)
            .map(() => scheduler.now() - start);
    });
        */
var msElapsed = function (scheduler) {
    if (scheduler === void 0) { scheduler = rxjs_1.Scheduler.animationFrame; }
    return Observable_1.Observable.defer(function () {
        var start = scheduler.now();
        return Observable_1.Observable.interval(0, scheduler)
            .map(function () { return scheduler.now() - start; });
    });
};
var duration = function (ms, scheduler) {
    if (scheduler === void 0) { scheduler = rxjs_1.Scheduler.animationFrame; }
    return msElapsed(scheduler)
        .map(function (elapsedMs) { return elapsedMs / ms; })
        .takeWhile(function (t) { return t <= 1; });
};
var amount = function (d) { return function (t) { return t * d; }; };
var amountRev = function (d, rev) {
    if (rev === void 0) { rev = false; }
    return function (t) {
        var ret = rev ? (1 - t) * d : t * d;
        return ret;
    };
};
var amountFromTo = function (range) {
    return function (t) {
        var ret = range.from + t * (range.to - range.from);
        return ret;
    };
};
var elasticOut = function (t) {
    return Math.sin(-13.0 * (t + 1.0) *
        Math.PI / 2) *
        Math.pow(2.0, -10.0 * t) +
        1.0;
};
//////////////////
var StarComponent = (function () {
    function StarComponent(page, ngZone) {
        this.page = page;
        this.ngZone = ngZone;
        this.status = 'hello status';
        this.position = 'hello position';
        this.rev = true;
    }
    StarComponent.prototype.ngOnInit = function () {
        var self = this;
        //let theLabel = this.labelRef.nativeElement;
        //let stack1 = this.stack1Ref.nativeElement;
    };
    StarComponent.prototype.ngAfterViewInit = function () {
    };
    Object.defineProperty(StarComponent.prototype, "range", {
        get: function () {
            return this.rev ? { from: 10, to: 150 } : { from: 150, to: 10 };
        },
        enumerable: true,
        configurable: true
    });
    StarComponent.prototype.onRectTap = function (args) {
        var _this = this;
        var lbl = args.object;
        duration(500)
            .map(amountFromTo(this.range))
            .subscribe(function (frame) {
            console.log('frame: ' + frame);
            lbl.style.borderRadius = "" + frame;
        }, function (er) { return console.error(er); }, function () { return _this.rev = !_this.rev; });
    };
    StarComponent.prototype.onTap = function (args) {
        var lbl = args.object;
        duration(1000)
            .map(d3.easeElasticOut)
            .map(amount(100))
            .subscribe(function (frame) {
            //lbl.scaleX = frame;
            //lbl.scaleY = frame;
            lbl.style.clipPath = "polygon(" + frame + "% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%)";
        });
        /*
                lbl.animate({
                    duration: 200,
                    scale: { x: 3, y: 3 },
                    curve: enums.AnimationCurve.easeIn
                }).then(() =>
                    lbl.animate({
                        duration: 200,
                        scale: { x: 1, y: 1 },
                        curve: enums.AnimationCurve.easeOut
                    })
                    );
                */
    };
    StarComponent.prototype.onPan = function (args) {
        console.log(args.state);
    };
    StarComponent.prototype.onTouch = function (args) {
        console.log(args.action);
    };
    StarComponent.prototype.onPositionUpdate = function (n) {
        var _this = this;
        this.ngZone.run(function () {
            _this.position = 'new pos: ' + n;
        });
    };
    StarComponent.prototype.onStatusUpdate = function (s) {
        var _this = this;
        this.ngZone.run(function () {
            console.log('status ' + s);
            _this.status = s;
        });
    };
    StarComponent.prototype.onEventUpdate = function (e) {
        var _this = this;
        this.ngZone.run(function () {
            _this.position = 'new pos: ' + e.getX();
        });
    };
    StarComponent.prototype.handleError = function (e) {
        console.dir(e);
    };
    return StarComponent;
}());
__decorate([
    core_1.ViewChild('lbl'),
    __metadata("design:type", core_1.ElementRef)
], StarComponent.prototype, "labelRef", void 0);
__decorate([
    core_1.ViewChild('stack1'),
    __metadata("design:type", core_1.ElementRef)
], StarComponent.prototype, "stack1Ref", void 0);
StarComponent = __decorate([
    core_1.Component({
        selector: "star",
        template: "\n    <StackLayout>\n        <Label class=\"star\" (tap)=\"onTap($event)\"></Label>\n        <Label class=\"rect-rad\" (tap)=\"onRectTap($event)\"></Label>\n        <Label class=\"half\" ></Label>\n    </StackLayout>\n    ",
        styles: ["\n        .star {\n            height: 100;\n            width: 100;\n            background-color: green;\n            clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);\n        }\n        .half {\n            width: 280;\n            height: 300;\n            background-color: #1e90ff;\n            clip-path: polygon(98.66025% 45%, 99.39693% 46.5798%, 99.84808% 48.26352%, 100% 50%, 99.84808% 51.73648%, 99.39693% 53.4202%, 98.66025% 55%, 78.66025% 89.64102%, 77.66044% 91.06889%, 76.42788% 92.30146%, 75% 93.30127%, 73.4202% 94.03794%, 71.73648% 94.48909%, 70% 94.64102%, 30% 94.64102%, 28.26352% 94.48909%, 26.5798% 94.03794%, 25% 93.30127%, 23.57212% 92.30146%, 22.33956% 91.06889%, 21.33975% 89.64102%, 1.33975% 55%, 0.60307% 53.4202%, 0.15192% 51.73648%, 0% 50%, 0.15192% 48.26352%, 0.60307% 46.5798%, 1.33975% 45%, 21.33975% 10.35898%, 22.33956% 8.93111%, 23.57212% 7.69854%, 25% 6.69873%, 26.5798% 5.96206%, 28.26352% 5.51091%, 30% 5.35898%, 70% 5.35898%, 71.73648% 5.51091%, 73.4202% 5.96206%, 75% 6.69873%, 76.42788% 7.69854%, 77.66044% 8.93111%, 78.66025% 10.35898%);\n        }\n        .rect-rad {\n            width: 300;\n            height: 300;\n            background-color: orange;\n            border-radius: 10;\n        }\n    "]
    }),
    __metadata("design:paramtypes", [page_1.Page, core_1.NgZone])
], StarComponent);
exports.StarComponent = StarComponent;
//# sourceMappingURL=data:application/json;base64,