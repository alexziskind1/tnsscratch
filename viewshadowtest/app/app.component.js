"use strict";
var core_1 = require("@angular/core");
var color_1 = require('color');
var AppComponent = (function () {
    function AppComponent() {
        this.slText = 'dfdf';
        console.log('ctorf');
    }
    Object.defineProperty(AppComponent.prototype, "shadowColor", {
        get: function () {
            return new color_1.Color('#888888');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppComponent.prototype, "shadowOffset", {
        get: function () {
            return 2.0;
        },
        enumerable: true,
        configurable: true
    });
    AppComponent.prototype.onLoaded = function (args) {
        var tnsView = args.object;
        if (tnsView.android) {
            var nativeAnView = tnsView.android;
            if (nativeAnView.setShadowLayer) {
                nativeAnView.setShadowLayer(10.0, this.shadowOffset, this.shadowOffset, this.shadowColor.android);
            }
            else {
                var shape = new android.graphics.drawable.GradientDrawable();
                shape.setShape(android.graphics.drawable.GradientDrawable.OVAL);
                //shape.setCornerRadii([ 40, 40, 40, 40, 40, 40, 40, 40 ]);
                shape.setColor(android.graphics.Color.parseColor("#eeeeee"));
                //shape.setStroke(3, android.graphics.Color.RED);
                nativeAnView.setBackgroundDrawable(shape);
                nativeAnView.setElevation(20);
            }
        }
        if (tnsView.ios) {
            var nativeView = tnsView.ios;
            setTimeout(function () {
                tnsView.clipToBounds = false;
                tnsView.ios.clipsToBounds = false;
                //tnsView.ios.masksToBounds = false;
                //tnsView.parent.ios.clipsToBounds = false;
                //tnsView.parent.ios.masksToBounds = false;
            }, 30);
            nativeView.layer.shadowColor = this.shadowColor.ios.CGColor;
            nativeView.layer.shadowOffset = CGSizeMake(0, this.shadowOffset);
            nativeView.layer.shadowOpacity = 0.5;
            nativeView.layer.shadowRadius = 5.0;
        }
    };
    AppComponent.prototype.onTap = function (args) {
        console.log('AppComponent tag');
        /*
        const nativeView = (<View>args.object).ios;
        nativeView.layer.shadowColor = this.shadowColor.ios.CGColor;
        nativeView.layer.shadowOffset = CGSizeMake(this.shadowOffset, this.shadowOffset);
        nativeView.layer.shadowOpacity = 1.0;
        nativeView.layer.shadowRadius = 2.0;
        */
    };
    AppComponent = __decorate([
        core_1.Component({
            selector: "my-app",
            templateUrl: "app.component.html",
        }), 
        __metadata('design:paramtypes', [])
    ], AppComponent);
    return AppComponent;
}());
exports.AppComponent = AppComponent;
//# sourceMappingURL=data:application/json;base64,